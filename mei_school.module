<?php

/**
 * @file
 *
 * This module is a base module for extensible elementary and secondary school
 * administration. With this module you can administer students, staff and
 * parents in a school.
 *
 * Based on School Administration, by Murat Tutumlu ("tutumlum", http://drupal.org/user/413570)
 */

/**
 * If academic year is 2000-2001, it is 2001
 * Default value is about to switch after August 30
 */
define("mei_school_C_YEAR", variable_get('mei_school_c_year', (date("m") < 9) ? date("Y") : date("Y") + 1));
define("mei_school_C_TERM", variable_get('mei_school_c_term', 1));


/**
 * implementation of hook_help.
 */
function mei_school_help($path, $arg) {
  if ($path == 'admin/help#mei_school') {
    return t('<p>First step of administrating a school is administering
      registration of students, teachers and non-academic staff. This module
      is a base module of school administration system, and it is responsible
      from keeping data of people.</p>');
  }
}

/**
 * Implementation of hook_permission()
 */
function mei_school_permission() {
  return array(
    'register new person' => array(
      'title' => t('Registration'),
      'description' => t('Allow users to register student, staff or parent. To make this is working you should grand "Administer users" permission too.'),
    ),
    'edit account info of everybody' => array(
      'title' => t('Edit accounts'),
      'description' => t('Allow users to edit all accounts'),
    ),
    'withdraw person' => array(
      'title' => t('Withdraw'),
      'description' => t('Allow users to withdraw any school personel or student'),
    ),
    'browse staff' => array(
      'title' => t('Browse staff'),
      'description' => t('Allow users to browse staff info'),
    ),
    'browse students and parents' => array(
      'title' => t('Browse students and parents'),
      'description' => t('Allow users to browse students and parents info'),
    ),
    'browse alumni' => array(
      'title' => t('Browse alumni'),
      'description' => t('Allow users to browse alumni info'),
    ),
    'change administrative info' => array(
      'title' => t('Update administrative info of users'),
      'description' => t('Allow users to update staff, student and parent related information and approve identity info changes'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter() for user_register_form;
 */
function mei_school_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $op = array_pop(explode('/', current_path()));

  switch ($op) {
    
    //default
    case 'register_new' :
      $op = 'student';
      
    case 'student' :
      $form += mei_school_student_info();
      break;
    
    case 'staff' :
      $form += mei_school_staff_info();
      break;
    
        
    default :
      //make it available only for mei_school module ???
      return;
  }
  
  $form += mei_school_identity_info();

  //hiding username and passworde fields 
  $pass_item =& $form['account']['pass'];
  $pass_item['#required'] = FALSE;
  $pass_item['#type'] = 'hidden';
  $usr_item =& $form['account']['name'];
  $usr_item['#required'] = FALSE;
  $usr_item['#type'] = 'hidden';

  unset($form['account']['roles']);
  if (variable_get('mei_school_new_user_options', 0) == 0) {
    //do not send e-mail
    //e-mail field is not required. It will be generated
    $form['account']['mail']['#required'] = FALSE;
    unset($form['account']['notify']);
  }

  $form['user_type'] = array(
    '#type' => 'value',
    '#value' => $op,
  );
  $form['actions']['submit']['#value'] = t('Register');
  //unset 'user_register_submit' function since
  //module will register user itself since uid is produced
  unset($form['#submit'][0]);
  //add school administration validation function to the beginning
  //since userid should be generated first
  $subs[] = 'mei_school_register_user';
  foreach ($form['#submit'] as $sub) {
    $subs[] = $sub;
  }
  $form['#submit'] = $subs;

  //add school administration validation function to the beginning
  //since username and password should be generated first
  $vals[] = 'mei_school_register_form_validate';
  foreach ($form['#validate'] as $val) {
    $vals[] = $val;
  }
  $form['#validate'] = $vals;
}

/**
 * implements hook_form_FORM_ID_alter() for user_profile_form
 * to limit "Administer users" permission.
 * 
 * If an admin wants to make "Administer users" work as it is, 
 * "Edit accounts" permission of this module should be granted
 */
function mei_school_form_user_profile_form_alter($form, &$form_state, $account, $category = 'account') {
  global $user;
  $allow = FALSE;
  if ($user->uid == 1 || $form['#user']->uid == $user->uid || user_access('edit account info of everybody')) {
    $allow = TRUE;
  }
  if (!$allow) {
    drupal_access_denied();
    module_invoke_all('exit');
    exit;
  }

}

/**
 * implements hook_username_alter()
 * to show formatted full names every where.
 * 
 */
function mei_school_username_alter(&$name, $account) {
  //if (isset($account->uid)) {
  //  $name = mei_school_formatted_full_name($account->uid) . " ($name)";
  //}
}

/**
 * To limit access to "Browse persons" menu callback
 */
function mei_school_access($op, $uid = 0) {
  GLOBAL $user;
  //user has enough permissions to view photos
  if (user_access('browse staff')
    || user_access('browse students and parents')
    || user_access('browse alumni')) {
      return TRUE;
  }
  switch ($op) {
    case 'browse' :
      return FALSE;
    case 'photo' :
      list($uid) = explode('.', $uid);
      //user is viewing anonymous photo or own photo
      if ($user->uid == $uid || $uid == 0) {
        return TRUE;
      }
      if (module_exists('classes_and_lessons')) {
        $teacher_classes = classes_and_lessons_teaching($user->uid);
        //if user is not a teacher
        if (!$teacher_classes) {
          return FALSE;
        }
        $student_classes = classes_and_lessons_listof_student_classes($uid);
        //is teacher teaching to the user
        $classes = array_intersect($teacher_classes, $student_classes);
        if (count($classes) > 0) {
          return TRUE;
        }
      }
  }
  return FALSE;
}

/**
 * Implementation of hook_menu()
 */
function mei_school_menu() {
  $items['mei_school'] = array(
    'title' => 'Registration',
    'description' => 'Administer Your School',
    'page callback' => 'mei_school_info',
    'access arguments' => array('register new person'),
    'weight' => -2,
  );
  $items['mei_school/register_new'] = array(
    'title' => 'Register New',
    'description' => 'Register New Person',
    'page callback' => 'mei_school_registration',
    'access arguments' => array('register new person'),
    'file' => 'mei_school.forms.inc',
    'weight' => -2,
  );
  $items['mei_school/withdraw'] = array(
    'title' => 'Withdraw',
    'description' => 'Withdraw staff or students',
    'page callback' => 'mei_school_withdraw',
    'access arguments' => array('withdraw person'),
    'weight' => -2,
  );
  $items['mei_school/withdraw/report'] = array(
    'title' => 'Withdrawal Report',
    'description' => 'Withdrawal Report of students and staff',
    'weight' => -2,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['mei_school/withdraw/student'] = array(
    'title' => 'Withdraw Student',
    'description' => 'Withdraw a student',
    'page arguments' => array(2),
    'access arguments' => array('withdraw person'),
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
    'file' => 'mei_school.forms.inc',
  );
  $items['mei_school/withdraw/staff'] = array(
    'title' => 'Withdraw Staff',
    'description' => 'Withdraw a staff',
    'page arguments' => array(2),
    'access arguments' => array('withdraw person'),
    'weight' => -0,
    'type' => MENU_LOCAL_TASK,
    'file' => 'mei_school.forms.inc',
  );
  $items['admin/config/mei_school'] = array(
    'title' => 'Settings',
    'description' => 'School Administration Module Settings',
    'page callback' => 'mei_school_settings',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM, 
    'file' => 'mei_school.forms.inc',
  );
  $items['mei_school/portraits'] = array(
    'title' => 'Portrait Photos',
    'description' => 'Add Portrait Photo',
    'page callback' => 'mei_school_insert_portrait',
    'access arguments' => array('access administration pages'),
    'weight' => 0,
    'file' => 'mei_school.forms.inc',
  );
  
  //@todo move to admin
  $items['mei_school/browse/students'] = array(
    'title' => 'Students',
    'description' => 'Browse Student',
    'access arguments' => array('browse students and parents'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['mei_school/browse/staff'] = array(
    'title' => 'Staff',
    'description' => 'Browse Staff',
    'access arguments' => array('browse staff'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  
  //@todo replace with civi custom value - student profile (former)
 /* $items['mei_school/browse/alumni'] = array(
    'title' => 'Alumni',
    'description' => 'Browse Alumni',
    'access arguments' => array('browse alumni'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );*/

  $items['mei_school/browse/%'] = array(
    'title' => 'Browse Persons',
    'page arguments' => array(2),
    'access callback' => 'mei_school_access',
    'access arguments' => array('browse'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implementation of hook_form_alter()
 */
function mei_school_form_alter(&$form, $form_state, $form_id) {
  if (!($form_id == 'user_profile_form')) {//'user_register_form' || 
    return;
  }
  $user_info = user_load($form_state['user']->uid);
  //if user registration is not done via mei_school
  if (!isset($user_info->identity)) {
    return;
  }
  include_once 'mei_school.forms.inc';
  if (isset($user_info->identity_not_approved)) {
    $user_identity = $user_info->identity_not_approved;
    $diff = mei_school_identity_not_approved_diff((array)$user_info->identity, (array)$user_info->identity_not_approved);
    if (user_access('change administrative info')) {
      $changes = t('User is updated his/her identity information. Please check it and save it.<br/>Old values:');
      foreach ($diff as $key => $value) {
        $changes .= "<br/>$key: $value";
      }
      drupal_set_message($changes, 'warning');
    }
    else {
      drupal_set_message(t('Your Identification info update is waiting for confirmation.'), 'warning');
    }
  }
  else {
    $user_identity = $user_info->identity;
  }
  $form['identity'] = mei_school_identity_info($user_identity);
  
  if (user_access('change administrative info')) {
    if(isset($user_info->student)) {
      $form['student'] = mei_school_student_info($user_info->student);
    }
    if(isset($user_info->staff)) {
      $form['staff'] = mei_school_staff_info($user_info->staff);
    }
    if(isset($user_info->parenting)) {
      $form['parent'] = mei_school_parent_info(NULL, $user_info->parenting);
    }
  }
  return $form;
}


// ======================================
// Page Callback Functions:
// ======================================

/**
 * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users.
 */
function mei_school_autocomplete_fullname($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('mei_school_users_identities', 'ui')
      ->fields('ui', array('uid'))
      ->condition('names', db_like($string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();
    foreach ($result as $user) {
      $matches[$user->uid] = check_plain(mei_school_formatted_full_name($user->uid));
    }
  }

  drupal_json_output($matches);
}

/**
 * Menu normal item; Main School Administration Link
 */
 
 //@todo this should all be opened to views, rather than created by itself
function mei_school_info() {
  $uid = mei_school_identity_not_approved();
  if ($uid && user_access('change administrative info')) {
    drupal_set_message(t("A user is updated his/her identity information. Please check it from !link and save it", array('!link' => l('here', "user/$uid/edit"))), 'warning');
  }
  $output = t('Number of Students:');
  $header = array(
    array('data' => t('Level')),
    array('data' => t('Old'), 'colspan' => 3),
    array('data' => t('New'), 'colspan' => 3),
    array('data' => t('Total'), 'colspan' => 3),
  );
  $rows[0] = array(
    t('Level'),
    t('Registered'),
    t('Withdrew'),
    t('Current'),
    t('Registered'),
    t('Withdrew'),
    t('Current'),
    t('Registered'),
    t('Withdrew'),
    t('Current'),
  );
  $all_students = mei_school_num_of_students('all');
  $old_students = mei_school_num_of_students('old');
  $new_students = mei_school_num_of_students('new');
  $old_withdrew = mei_school_num_of_withdrew_students('old');
  $new_withdrew = mei_school_num_of_withdrew_students('new');
  $students = array();
  foreach ($all_students as $level => $num) {
    $students[$level] = array(
      'old_students' => (isset($old_students[$level]) ? $old_students[$level] : 0),
      'old_withdrew' => (isset($old_withdrew[$level]) ? $old_withdrew[$level] : 0),
      'new_students' => (isset($new_students[$level]) ? $new_students[$level] : 0),
      'new_withdrew' => isset($new_withdrew[$level]) ? $new_withdrew[$level] : 0
    );
  }
  $i = 1;
  foreach ($students as $level => $numbers) {
    $rows[$i][] = $level;
    $rows[$i][] = $numbers['old_students'];
    $rows[$i][] = $numbers['old_withdrew'];
    $rows[$i][] = ($numbers['old_students'] - $numbers['old_withdrew']);
    $rows[$i][] = $numbers['new_students'];
    $rows[$i][] = $numbers['new_withdrew'];
    $rows[$i][] = ($numbers['new_students'] - $numbers['new_withdrew']);
    $rows[$i][] = ($numbers['old_students'] + $numbers['new_students']);
    $rows[$i][] = ($numbers['old_withdrew'] + $numbers['new_withdrew']);
    $rows[$i][] = ($numbers['old_students'] - $numbers['old_withdrew'] + $numbers['new_students'] - $numbers['new_withdrew']);
    $i++;
  }
  $rows[$i][] = t('Total');
  $old_st = mei_school_sum_subarrays_by_key($students, 'old_students');
  $old_wt = mei_school_sum_subarrays_by_key($students, 'old_withdrew');
  $new_st = mei_school_sum_subarrays_by_key($students, 'new_students');
  $new_wt = mei_school_sum_subarrays_by_key($students, 'new_withdrew');
  $rows[$i][] = $old_st;
  $rows[$i][] = $old_wt;
  $rows[$i][] = ($old_st - $old_wt);
  $rows[$i][] = $new_st;
  $rows[$i][] = $new_wt;
  $rows[$i][] = ($new_st - $new_wt);
  $rows[$i][] = ($old_st + $new_st);
  $rows[$i][] = ($old_wt + $new_wt);
  $rows[$i][] = ($old_st - $old_wt + $new_st - $new_wt);
  $table1 = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => 1,
    'empty' => '',
  );
  $output .= theme_table($table1);
  
  return $output;
}

/**
 * Menu normal item; Insert portrait photos to database
 */
function mei_school_student_withdrawal_report() {
  $header = array(
    array('data' => t('No:')),
    array('data' => t('School No')),
    array('data' => t('Name and Surname')),
    array('data' => t('Grade Level')),
    array('data' => t('Debt Left')),
    array('data' => t('Reason')),
  );
  $rows = array();
  $i = 1;
  foreach (mei_school_list_of_withdrew_students() as $withdraw) {
    $term = taxonomy_term_load($withdraw->reason);
    if (module_exists('classes_and_lessons')) {
      $grade_level = implode(', ', classes_and_lessons_listof_student_classes($withdraw->school_no));
    }
    else {
      $user = user_load($withdraw->school_no);
      $grade_level = $user->full_name;
    }
    $rows[] = array(
      $i,
      $withdraw->school_no,
      mei_school_formatted_full_name($withdraw->school_no),
      $grade_level,
      $withdraw->debt_of_student_left,
      $term->name,
    );
    $i++;
  }
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => 1,
    'empty' => '',
  );
  return theme_table($table);
}



/**
 * Menu local task; Register New
 */
function mei_school_registration() {
  $_form = drupal_get_form('user_register_form');
  return drupal_render($_form);
}

/**
 * Menu local task; withdraw
 */
function mei_school_withdraw($withdraw = 'report') {
  $output = '';
  switch ($withdraw) {
    case 'report' :
    $output .= mei_school_student_withdrawal_report();
    break;

    case 'student' :
    $_form = drupal_get_form('mei_school_student_withdraw_form');
    $output .= drupal_render($_form);
    break;

    case 'staff' :
    $_form = drupal_get_form('mei_school_staff_withdraw_form');
    $output .= drupal_render($_form);
    break;
  }
  return $output;
}

/**
 * Menu local task; School Administration Settings
 */
function mei_school_settings() {
   $_form = drupal_get_form('mei_school_admin');
   return drupal_render($_form);
}

/**
 * Menu callback; Sets whether registration year is
 * current academic year or next academic year.
 *
 * @param $mode
 *   Valid values are 'current' and 'next'.
 */
function mei_school_register_to($mode = 'current') {
  global $user;
  user_save($user, array('register_to' => ($mode == 'next')));
  drupal_goto(drupal_get_destination());
}

function mei_school_show_user($form, &$form_state) {
  $form['browse'] = array(
    '#type' => 'fieldset',
    '#title' => t('View any user\'s profile info'),
  );
  $form['browse']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Full name or ID Number of user'),
    '#autocomplete_path' => 'mei_school/autocomplete_fullname',
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Show user'));
  
  return $form;
}

function mei_school_show_user_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['user'])) {
    form_set_error('user', t('Please submit only ID Number.'));
  }
  $account = user_load($form_state['values']['user']);
  if (!$account) {
    form_set_error('user', t('You have entered an invalid ID Number.'));
  }
}

function mei_school_show_user_submit($form, &$form_state) {
  drupal_goto('user/' . $form_state['values']['user']);
}

/**
 * Menu normal item; Browse persons
 */
function mei_school_browse($path = NULL) {
  $path_arr = explode('/', current_path());
  if ($path == NULL || !isset($path_arr[4]) || !is_numeric($uid = array_pop($path_arr))) {
    return drupal_render(drupal_get_form('mei_school_show_user'));
  }
  if ($path_arr[2] == 'parents') {
    $output = 'Registered Parents:<br />';
    $parents = mei_school_parents_of_student($uid);
    foreach ($parents as $parent) {
      $output .= $parent->relation . ' : ' . l(mei_school_formatted_full_name($parent->uid), 'user/' . $parent->uid) . "<br />";
    }
    return $output;
  }
  $account = user_load($uid);
  user_build_content($account);
  $build = $account->content;
  $build += array(
    '#theme' => 'user_profile',
    '#account' => $account,
  );
  return $build;
}



// ======================================
// Helper Functions:
// ======================================

/**
 * generate username form name and surname as first letter of the name and whole surname.
 *
 */
function mei_school_generate_user_name($name, $surname){
  $i = 0;
  do {
    $ex = ($i == 0) ? '' : $i;
    //to produce username mtutumlu for Murat Tutumlu
    $uname = drupal_strtolower(drupal_substr($name , 0, 1) . str_replace(array(' ', '.'), '', $surname)) . $ex;
    $i++;
  }
  while (db_query("
    SELECT COUNT(name)
    FROM {users}
    WHERE name = :name",
    array(':name' => $uname)
    )
    ->fetchField() > 0
  );
  return $uname;
}



/**
 * It the diffrence between recorded identity info and updatated identity info.
 *
 * @return array of difference
 */
function mei_school_identity_not_approved_diff($record, $edit) {
  $diff = array();
  foreach ($record as $key => $value) {
    if (isset($edit[$key]) && $edit[$key] != $value) {
      //extract changes
      $diff[$key] = $value;
    }
  }
  unset($diff['vid'], $diff['update_approved'], $diff['update_time'], $diff['updater_uid']);
  return $diff;
}

/**
 * It checks any apporval for identity update is exist or not.
 *
 * @return vid for the first match
 */
function mei_school_identity_not_approved($uid = NULL) {
  if ($uid == NULL) {
    $vids = db_query('SELECT uid, MAX(vid) FROM {mei_school_users_identities} GROUP BY uid ORDER BY update_time ASC')->fetchAllKeyed();
  }
  else {
    $vids = db_query('SELECT uid, MAX(vid) FROM {mei_school_users_identities} WHERE uid=:uid ORDER BY update_time ASC', array(':uid' => $uid))->fetchAllKeyed();
  }
  foreach ($vids as $uid => $vid) {
    $app = db_query('SELECT update_approved as app FROM {mei_school_users_identities} WHERE vid=:vid', array(':vid' => $vid))->fetchField();
    if ($app == 0) {
      return $uid;
    }
  }
  return FALSE;
}

/**
 * It checks user is a student or not.
 *
 * @param $uid
 *   id of suggested user.
 *
 * @return student info array or FALSE
 */
function mei_school_student($uid) {
  $result = db_query("
    SELECT *
    FROM {mei_school_student_main}
    WHERE school_no = :uid
    AND withdraw_date IS NULL
    AND academic_year = :cyear",
    array(':cyear' => mei_school_C_YEAR, ':uid' => $uid)
  )
  ->fetch();
  return ($result) ? $result : FALSE;
}

/**
 * It checks user is a staff or not.
 *
 * @param $uid
 *   id of suggested user.
 *
 * @return staff info array or FALSE
 */
function mei_school_staff($uid) {
  $result = db_query("
    SELECT *
    FROM {mei_school_staff_main}
    WHERE staff_no = :uid
    AND academic_year = :cyear",
    array(':cyear' => mei_school_C_YEAR, ':uid' => $uid)
  )
  ->fetch();
  return ($result) ? $result : FALSE;
}

/**
 * It gets roles assigned to staff.
 *
 * @return role id array;
 */
function mei_school_staff_roles() {
  $result = array();
  $proles = variable_get('mei_school_predefined_roles');
  $staff_rid = $proles['staff']['rid'];
  $staff = db_query("SELECT uid FROM {users_roles} WHERE rid = :rid", array(':rid' => $staff_rid))->fetchCol();
  foreach ($staff as $st) {
    $roles = db_query("SELECT r.rid, r.name FROM {role} r, {users_roles} ur WHERE r.rid=ur.rid AND uid = :uid", array(':uid' => $st))->fetchAllKeyed();
    foreach ($roles as $rid => $role) {
      $result[$rid] = $role;
    }
  }
  return $result;
}


/**
 * It checks user is an alumnus or not.
 *
 * @param $uid
 *   id of suggested user.
 *
 * @return alumnus info array or FALSE
 */
function mei_school_alumnus($uid) {
  $result = db_query("
    SELECT *
    FROM {mei_school_alumni}
    WHERE school_no = :uid",
    array(':uid' => $uid)
  )
  ->fetch();
  return ($result) ? $result : FALSE;
}

/**
 * Producing num_range array for department digits from user input
 *
 * @return ranges
 *    returns an array
 */
function mei_school_get_id_conf_range ($type) {
  $ranges = array();
  switch ($type) {
    case 'register_new' :
    case 'student' :
      $text = variable_get('mei_school_num_range');
      break;

    case 'staff' :
      $text = variable_get('mei_school_num_range_staff');
      break;

    case 'parent' :
      return $ranges;

  }
  if (module_exists('php') && substr($text, 0, 5) == '<?php') {
    $text = str_replace(array('[', ']'), '', php_eval($text));
  }
  foreach (explode(chr(10), $text) as $val) {
    $r = explode('=>', $val);
    if (isset($r[1])) {
      $ranges[trim($r[0])] = trim($r[1]);
    }
  }
  return $ranges;
}

/**
 * Perform a calculation for custom uid.
 *
 * Configured user id will be in format yydxx which is 'yy' last two digits of current year,
 * 'd' is department digit, x's are ordered numbers.
 *
 * @param $range
 *    To divide enrolling students to groups.
 *    It is an integer value passed from $form_state array of student registration form
 *    or NULL (default value) if user is staff or parent.
 *
 * @return uid
 *    returns an integer
 */
function mei_school_calculate_user_id ($type, $range = NULL) {
  $start_digits = (mei_school_register_to_next_year()) ? mei_school_C_YEAR - 2000 : mei_school_C_YEAR - 2001;
  $st_id_len = variable_get('mei_school_std_id_len', 2);
  //fill student ID lenght with zeros
  $st_id_fill = sprintf("%0" . $st_id_len . "s", 0);
  //get the ranges
  $ranges = mei_school_get_id_conf_range($type);
  if ($range != NULL) {
    //student
    //get the range name
    $range_name = $ranges[$range];
    //the ranges which are assigned to this name
    foreach ($ranges as $k => $r) {
      if ($range_name == $r) {
        $s_ranges[] = $k;
      }
    }
    $range_num_max = MAX($s_ranges);
    $range_num_min = MIN($s_ranges);
    //the number bigger than highest possible userid in the given range
    $max = $start_digits . $range_num_max + 1 . $st_id_fill;
    //the number smaller than lowest possible userid in the given range
    $min = $start_digits . $range_num_min . $st_id_fill;
    $max_in_range = db_query("
      SELECT MAX(uid) + 1
      FROM {users}
      WHERE uid > :min
      AND uid < :max",
      array(':min' => $min, ':max' => $max)
    )
    ->fetchField();
    return ($max_in_range > $min) ? $max_in_range : ($min + 1);
  }
  else {
    //parent
    $ranges = array_merge(mei_school_get_id_conf_range('student'), mei_school_get_id_conf_range('staff'));
    //get the range keys
    $range_keys = array_keys($ranges);
    //get the shortest key as first
    array_multisort(array_map('strlen', $range_keys), SORT_ASC, SORT_NUMERIC, $range_keys);
    //get zero's with the length of shortest range key
    $range_fill = sprintf("%0" . strlen($range_keys[0]) . "s", 0);
    //the smallest ID number produced.
    $st_no_min = $start_digits . $range_fill . $st_id_fill;
    $max_out_of_range = db_query("
      SELECT MAX(uid) + 1
      FROM {users}
      WHERE uid < :min",
      array(':min' => $st_no_min)
    )
    ->fetchField();
    //return Parent ID with possible minimum non-configured userid
    return $max_out_of_range;
  }
}

/**
 * Determine if registration mode is next academic year.
 */
function mei_school_register_to_next_year() {
  global $user;
  return (isset($user->register_to)) ? $user->register_to : FALSE;
}

/**
 * Display the link to shift academic year to register students and parents.
 */
function mei_school_next_year_link() {
  $output = '';
  if (mei_school_register_to_next_year()) {
    $output .= t('Now registering to !y1 - !y2 academic year.', array(
      '!y1' => mei_school_C_YEAR,
      '!y2' => mei_school_C_YEAR + 1,
    ));
    $output .= l(
      t('Switch to !y1 - !y2 academic year', array(
        '!y1' => mei_school_C_YEAR - 1,
        '!y2' => mei_school_C_YEAR,
      )),
      'mei_school/reg_year/current', array(
        'attributes' => array(
          'title' => t('Register new person to current academic year.')
        ),
        'query' => drupal_get_destination()
      ));
  }
  else {
    $output .= t('Now registering to !y1 - !y2 academic year. ', array(
      '!y1' => mei_school_C_YEAR - 1,
      '!y2' => mei_school_C_YEAR,
    ));
    $output .= l(
      t('Switch to !y1 - !y2 academic year', array(
        '!y1' => mei_school_C_YEAR,
        '!y2' => mei_school_C_YEAR + 1,
      )),
      'mei_school/reg_year/next', array(
        'attributes' => array(
          'title' => t('Register new person to next academic year.')
        ),
        'query' => drupal_get_destination()
      ));
  }
  drupal_set_message($output, 'status');
}


/**
 * Sweeps pre-defined roles out from given array
 *
 * @return array of roles.
 */
function mei_school_slice_predefined_roles($all_roles) {
  //remove anonimous user, authenticated user and administrator
  unset($all_roles[1], $all_roles[2], $all_roles[3]);
  //get student, staff and parent rid's
  foreach (variable_get('mei_school_predefined_roles') as $role) {
    $predef_roles[] = $role['name'];
  }
  //get student, staff and parent roles
  $result = array_diff($all_roles, $predef_roles);
  //sort with keeping keys unchanged
  asort($result);
  return $result;
}

/**
 * Provides recorded student grade levels.
 *
 * @return array of levels.
 */
function mei_school_browse_student_levels() {
  $result = db_query("
    SELECT DISTINCT level
    FROM {mei_school_student_main}
    WHERE academic_year = :cyear",
    array(':cyear' => mei_school_C_YEAR)
  )
  ->fetchCol();
  sort($result);
  return $result;
}

/**
 * Provides recorded alumni classes year by year.
 *
 * @return array of classes in yyyy-A format.
 */
function mei_school_browse_alumni_years() {
  $classes = array();
  $result = db_query("
    SELECT DISTINCT graduation_year, class
    FROM {mei_school_alumni}"
  );
  foreach ($result as $class) {
    $classes[] = "$class->graduation_year-$class->class";
  }
  sort($classes);
  return $classes;
}

/**
 * Provides uid's of alumni.
 *
 * @param $section
 *   suggested section in yyyy-A format.
 *
 * @return array uid's.
 */
function mei_school_alumni_list($section) {
  $result = explode('-', $section);
  $students = db_query("
    SELECT school_no
    FROM {mei_school_alumni}
    WHERE graduation_year = :year
    AND class = :class",
    array(':year' => $result[0], ':class' => $result[1])
  )
  ->fetchCol();
  return $students;
}

/**
 * Provides uid's of staff who have suggested role.
 *
 * @param $role
 *   suggested role.
 *
 * @return array uid's.
 */
function mei_school_staff_list($role) {
  $staff = db_query("
    SELECT s.staff_no
    FROM {mei_school_staff_main} s, {users_roles} ur, {role} r
    WHERE s.staff_no = uid AND ur.rid=r.rid
    AND s.academic_year = :cyear
    AND r.name = :role",
    array(':cyear' => mei_school_C_YEAR, ':role' => $role)
  )
  ->fetchCol();
  return $staff;
}

/**
 * Provides uid's of students who have suggested level.
 *
 * @param $level
 *   suggested level.
 *
 * @return array uid's.
 */
function mei_school_student_list($level) {
  $result = db_query("
    SELECT school_no
    FROM {mei_school_student_main}
    WHERE level = :level
    AND academic_year = :cyear
    AND withdraw_date IS NULL
    ORDER BY school_no",
    array(':cyear' => mei_school_C_YEAR, ':level' => $level)
  )
  ->fetchCol();
  return $result;
}

/**
 * Provides uid's of all present teachers.
 *
 * @return array uid's.
 */
function mei_school_list_of_all_teachers() {
  $rids = variable_get('mei_school_teacher_roles', array(1));
  $result = db_query("
    SELECT staff_no
    FROM {mei_school_staff_main}, {users_roles}
    WHERE staff_no = uid
    AND withdraw_date IS NULL
    AND rid IN (:rids)
    AND academic_year = :cyear",
    array(':cyear' => mei_school_C_YEAR, ':rids' => $rids)
  )
  ->fetchCol();
  return $result;
}


/**
 * Provides formatted full name of suggested user.
 *
 * @param $uid
 *   uid of suggested user.
 * @param $format
 *   selected format id of full name.
 *
 * @return formatted full name.
 */
function mei_school_formatted_full_name($uid) {
  $format = variable_get('mei_school_full_name_format', 0);
  $formatted = array();
  $result = db_query("
    SELECT title, names, surname
    FROM {mei_school_users_identities}
    WHERE uid = :uid 
    AND update_approved=1 
    ORDER BY vid DESC",
    array(':uid' => $uid)
  )
  ->fetch();
  if (count($result) > 0) {
    $title = (isset($result->title)) ? $result->title : '';
    $names = (isset($result->names)) ? $result->names : '';
    $surname = (isset($result->surname)) ? $result->surname : '';
    switch ($format) {
      case 2 :
        $formatted[] = drupal_strtoupper($surname) . ',';
        foreach (explode(' ', $names) as $name) {
          $formatted[] = drupal_ucfirst(drupal_strtolower($name));
        }
        break;

      case 1 :
        $formatted[] = drupal_ucfirst(drupal_strtolower($title));
        foreach (explode(' ', $names) as $name) {
          $formatted[] = drupal_ucfirst(drupal_strtolower($name));
        }
        $formatted[] = drupal_ucfirst(drupal_strtolower($surname));
        break;

      default :
        foreach (explode(' ', $names) as $name) {
          $formatted[] = drupal_ucfirst(drupal_strtolower($name));
        }
        $formatted[] = drupal_ucfirst(drupal_strtolower($surname));
    }
  }
  return implode(' ', $formatted);
}

/**
 * Provides sum of sub-arrays' values with a definite key of sub arrays.
 * array (
 *   1 => array(7 => 22, 8 => 30, 9 => 43 ),
 *   2 => array(7 => 23, 8 => 31, 9 => 44 ),
 *   3 => array(7 => 24, 8 => 32, 9 => 45 ),
 * )
 *
 * @param $array
 *   multi-dimensional array
 * @param $key
 *   definite key of sub arrays.
 *
 * @return sum of additions.
 * above arrray with $key = 8 returns 30+31+32
 */
function mei_school_sum_subarrays_by_key($array, $key) {
  $sum = 0;
  foreach ($array as $sub_array) {
    $sum += $sub_array[$key];
  }
  return $sum;
}

/**
 * Provides number of current students in every level with given condition.
 *
 * @param $op
 *   condition options.
 * options are: new, old, male, female.
 *
 * @return array of levels and number of students.
 */
function mei_school_num_of_students($op) {
  $query = db_select('mei_school_student_main', 's');
  $query->leftjoin('mei_school_users_identities', 'u', 's.school_no = u.uid');
  $query->addExpression('COUNT(DISTINCT school_no)');
  $query->addField('s', 'level');
  switch ($op) {
    case 'new' :
      $query->where("school_no > :range", array(':range' => (mei_school_C_YEAR - 2001)*1000));
      break;

    case 'old' :
      $query->where("school_no < :range", array(':range' => (mei_school_C_YEAR - 2001)*1000));
      break;

    
    case 'all' :
    break;
  }
  $query->where("s.academic_year = :cyear", array(':cyear' => mei_school_C_YEAR));
  $query->groupBy('level');
  $students = $query->execute()->fetchAllKeyed();
  ksort($students);
  return $students;
}

/**
 * Provides number of withdrew students in every level with given condition.
 *
 * @param $op
 *   condition options.
 * options are: new, old.
 *
 * @return array of levels and number of students.
 */
function mei_school_num_of_withdrew_students($op) {
  $query = db_select('mei_school_withdrawal', 'w');
  $query->leftjoin('mei_school_student_main', 's', 'w.school_no = s.school_no');
  $query->addExpression('COUNT(w.school_no)');
  $query->addField('s', 'level');
  if ($op == 'new') {
    $query->where("w.school_no > (:cyear - 2001)*1000", array(':cyear' => mei_school_C_YEAR));
  }
  else {
    $query->where("w.school_no < (:cyear - 2001)*1000", array(':cyear' => mei_school_C_YEAR));
  }
  $query->where("s.academic_year = :cyear", array(':cyear' => mei_school_C_YEAR));
  $query->where("w.academic_year = s.academic_year");
  $query->groupBy('s.level');
  $students = $query->execute()->fetchAllKeyed();
  ksort($students);
  return $students;
}



// ======================================
// Form Validation Functions:
// ======================================


function mei_school_register_form_validate($form, &$form_state){
  if (!form_get_errors()) {
    $uname = mei_school_generate_user_name($form_state['values']['names'], $form_state['values']['surname']);
    $pass = user_password(8);
    if (variable_get('mei_school_id_conf_use_default', 1) != 1) {
      $range = isset($form_state['values']['num_range']) ? $form_state['values']['num_range'] : NULL ;
      $form_state['values']['uid'] = mei_school_calculate_user_id($form_state['values']['user_type'], $range);
    }
    else {
      $form_state['values']['uid'] = 0;
    }
    form_set_value($form['account']['pass'], $pass, $form_state);
    form_set_value($form['account']['name'], $uname, $form_state);
    
    if (empty($form_state['values']['mail'])) {
      form_set_value($form['account']['mail'], $uname . '@' . $_SERVER['HTTP_HOST'], $form_state);
    }
    elseif (isset($form['account']['notify'])) {
      form_set_value($form['account']['notify'], 1, $form_state);
    }
  }
}

function mei_school_admin_validate($form, &$form_state) {
  $cyear = (int)$form_state['values']['mei_school_c_year'];
  if ($cyear <= 0) {
    form_set_error('mei_school_c_year', t("You must type a year"));
  }
  $sc_length = (int)$form_state['values']['mei_school_std_id_len'];
  if ($sc_length <= 0 || $sc_length > 9) {
    form_set_error('mei_school_std_id_len', t("You must type an integer less than 10"));
  }
}

function mei_school_student_withdraw_form_validate($form_id, &$form_state) {
  if ($form_state['values']['reason'] == '') {
    form_set_error('reason', t("You must select a reason"));
  }
  $school_no = explode('-', $form_state['values']['school_no']);
  foreach ($school_no as $st_no) {
    if (!mei_school_student($st_no)) {
      form_set_error('school_no', t("School No <b> !st </b> is not a registered student number...", array('!st' => $st_no)));
    }
  }
}

function mei_school_insert_portrait_form_validate($form_id, &$form_state) {
  if (!is_dir(DRUPAL_ROOT . '/sites/default/files/' . $form_state['values']['pdir'])) {
    form_set_error('pdir', t("directory named as '!path' is not exist", array('!path' => $form_state['values']['pdir'])));
  }
}

// ======================================
// Form Submit Functions:
// ======================================

/**
 * Perform registering new user.
 *
 * New user's name, surname and range should be set to register new user
 * name and surname will be used to produce username. password will be prodeced automaticaly.
 * user id for new user for 3 main groups of users:
 * students, staff and parents
 *
 * @param $name
 *    name of the user
 * @param $surname
 *    surname of the user
 * @param $range
 *    department digits to generate user id
 *
 * @return array
 *    returns an array of user information
 */
function mei_school_user_data_insert($values) {
  $userinfo = array(
    'name' => $values['name'],
    'pass' => $values['pass'],
    'init' => $values['name'],
    'status' => 1,
    'mail' => $values['mail'],
    'created' => REQUEST_TIME
  );
  if ($values['uid'] != 0) {
    $userinfo['uid'] = $values['uid'];
  }
  $user = user_save(drupal_anonymous_user(), $userinfo);
  drupal_set_message(
    t('@name is registered as <b>@role</b>.
      <br/>ID: @id',
      array('@name' => $user->name,
        '@id' => $user->uid,
        '@role' => $values['user_type'],
      )
    )
  );
  if (!empty($values['mail']) && variable_get('mei_school_new_user_options', 0) == 1) {
    //send registration e-mail
    _user_mail_notify('register_admin_created', $user);
    drupal_set_message(t('A welcome message with further instructions to access the system has been e-mailed to the new user.'));
  }
  else {
    //if no e-mail is provided during registration
    //print  username & password of new user with his/her role and uid on screen.
    drupal_set_message(t('username: @uname<br/>password: @pass', array('@uname' => $userinfo['name'], '@pass' => $userinfo['pass'])));
  }
  $user->pass = $userinfo['pass'];
  return $user;
}


function mei_school_student_withdraw_form_submit($form_id, &$form_state) {
  $node = $form_state['values'];
  $school_no = explode('-', $node['school_no']);
  $bl = (!empty($node['status'])) ? 'Blacklisted@@' : '';
  foreach ($school_no as $st_no) {
    $num = db_insert('mei_school_withdrawal')
      ->fields(array(
        'school_no' => $st_no,
        'academic_year' => mei_school_C_YEAR,
        'reason' => $node['reason'],
        'given_documents' => $node['doc'],
        'debt_of_student_left' => (float)$node['dept_left'],
        'notes' => $bl . $node['notes'],
      )
    )
    ->execute();
    $num_updated = db_update('mei_school_student_main')
      ->fields(array('withdraw_date' => $node['date']['year'] . '-' . $node['date']['month'] . '-' . $node['date']['day']))
      ->condition('school_no', $st_no, '=')
      ->execute();
    if ($form_state['values']['reason'] == variable_get('mei_school_graduation_tid')) {
      db_insert('mei_school_alumni')
      ->fields(array('school_no' => $st_no, 'graduation_year' => date('Y')))
      ->execute();
    }
    else {
      user_cancel(array('user_cancel_notify' => FALSE), $st_no, 'user_cancel_block');
    }
    drupal_set_message(t("The student with School No <b> :st </b> is withdrew...", array(':st' => $st_no)));
  }
}

function mei_school_staff_withdraw_form_submit($form_id, &$form_state) {
  $node = $form_state['values'];
  $num_updated = db_update('mei_school_staff_main')
    ->fields(array('withdraw_date' => $node['date']['year'] . '-' . $node['date']['month'] . '-' . $node['date']['day']))
    ->condition('staff_no', $node['staff_no'], '=')
    ->execute();
  user_cancel($edit = array(), $node['staff_no'], 'user_cancel_block');
  drupal_set_message(t("The staff with Staff No <b> :st </b> is withdrew...", array(':st' => $node['staff_no'])));
}

function mei_school_register_user(&$form, &$form_state) {
  global $user;
  $user_info = mei_school_user_data_insert($form_state['values']);
  //in case uid is drupal default
  $form_state['values']['uid'] = $user_info->uid;
  $form_state['values']['updater_uid'] = $user->uid;
  $form_state['values']['update_approved'] = 1;
  mei_school_identity_insert($form_state['values']);
  switch ($form_state['values']['user_type']) {

    //default value
    case 'register_new' :
    case 'student' :
      $parent_id = mei_school_student_write($form_state['values']);
      $form_state['redirect'] = "mei_school/register_new/parent/$parent_id/parent";
      break;
    
    case 'staff' :
      mei_school_staff_write($form_state['values']);
      drupal_set_message(l(t('You may add additional role(s)'), "user/$user_info->uid/edit"));
      break;
    
    case 'parent' :
      //do 2 dimentional array for each kid of the current parent
      $fields = array('relation', 'guardian', 'student_resides');
      foreach ($form_state['values'] as $field => $value) {
        $arr = explode('_', $field);
        $school_no = array_pop($arr);
        $field_name = implode('_', $arr);
        foreach ($fields as $field) {
          if ($field_name == $field) {
            $children[$school_no][$field] = $value;
          }
        }
      }
      //record for each kid
      foreach ($children as $school_no => $data) {
        $data['school_no'] = ($school_no == 0) ? $form_state['values']['school_no_0'] : $school_no;
        $parent_data = array_merge($data, $form_state['values']);
        mei_school_parent_write($parent_data);
      }
      $form_state['redirect'] = "mei_school/register_new/parent";
      break;
  }
}

// ======================================
// Storing Data:
// ======================================


/**
 * Perform registering student information of new student.
 *
 * @param $values
 *    array of identity info gathered from registration form
 *
 * @param $uid
 *    generated user id of registered user
 */
function mei_school_student_write($values, $primary_keys = array()) {
  $st_res = (isset($values['student_resides'])) ? $values['student_resides'] : '';
  //if the record is coming from student register form we need this
  if (!isset($values['uid'])) {
    $values['uid'] = 0;
  }
  $acd_year = (mei_school_register_to_next_year()) ? (mei_school_C_YEAR + 1) : mei_school_C_YEAR;
  $values = array(
    'school_no'               => $values['uid'],
    'academic_year'           => $acd_year,
    'enrollment_date'         => $values['enrollment_date']['year'] . '-' . $values['enrollment_date']['month'] . '-' . $values['enrollment_date']['day'],
    'level'                   => $values['level'],
    'scholarship'             => $values['scholarship'],
    'scholarship_description' => $st_res,
  );
  if (empty($primary_keys)) {
    drupal_write_record('mei_school_student_main', $values);
    $proles = variable_get('mei_school_predefined_roles');
    db_insert('users_roles')->fields(array('uid' => $values['school_no'], 'rid' => $proles['student']['rid']))->execute();
    if(!empty($st_res)) {
      $values['student_resides'] = $st_res;
      //return parent_id of record parent to use at parent registration form
      return mei_school_student_reside_write($values);
    }
  }
  else {
    drupal_write_record('mei_school_student_main', $values, $primary_keys);
  }
}


/**
 * Perform registering staff information of new staff.
 *
 * @param $values
 *    array of staff info gathered from registration form
 *
 */
function mei_school_staff_write($values, $primary_keys = array()) {
  $acd_year = (mei_school_register_to_next_year()) ? (mei_school_C_YEAR + 1) : mei_school_C_YEAR;
  $values = array(
    'staff_no'      => $values['uid'],
    'academic_year' => $acd_year,
    'branch'        => $values['branch'],
    'start_date'    => $values['start_date']['year'] . '-' . $values['start_date']['month'] . '-' . $values['start_date']['day'],
    'contract_type' => $values['contract']
  );
  if (empty($primary_keys)) {
    drupal_write_record('mei_school_staff_main', $values);
    $proles = variable_get('mei_school_predefined_roles');
    db_insert('users_roles')->fields(array('uid' => $values['staff_no'], 'rid' => $proles['staff']['rid']))->execute();
  }
  else {
    drupal_write_record('mei_school_staff_main', $values, $primary_keys);
  }
}

/**
 * Perform registering identification information of new user.
 *
 * @param $values
 *   array of identity info gathered from registration form
 *
 */
function mei_school_identity_insert($values) {
  if (!isset($values['names']) || !isset($values['surname'])) {
    return;
  }
  $values['dob'] = $values['dob']['year'] . '-' . $values['dob']['month'] . '-' . $values['dob']['day'];
  $values['update_time'] = REQUEST_TIME;
  
  $schema = drupal_get_schema('mei_school_users_identities');
  $fields = array_keys($schema['fields']);
  //unset vid serial field
  unset($fields[0]);
  foreach ($fields as $field) {
    $vals[$field] = $values[$field];
  }
  db_insert('mei_school_users_identities')->fields($vals)->execute();
}

// ======================================
// Hook Functions:
// ======================================

/**
 * Implementation of hook_user_view
 */
function mei_school_user_view($account) {
  if(mei_school_identity_not_approved($account->uid)) {
    drupal_set_message(t('Your Identification info update is waiting for confirmation.'), 'warning');
  }
  if (isset($account->identity)) {

    $account->content['Identity']['uid'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('ID Number:'),
      '#markup' => l($account->uid, "user/$account->uid/edit"),
      '#weight' => -1,
    );
    $account->content['Identity']['full_name'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Full Name:'),
      '#markup' => mei_school_formatted_full_name($account->uid),
      '#weight' => 0,
    );
    $account->content['Identity']['dob'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Date of Birth:'),
      '#markup' => format_date(strtotime($account->identity->dob), 'custom', 'l, j F Y'),
      '#weight' => 1,
    );
//@pull from civi
    $account->content['Identity']['home_address'] =  array(  
      '#type' => 'user_profile_item',
      '#title' => t("Home Address:"),
      '#markup' => $account->identity->home_address,
      '#weight' => 8,
    );
  }
  if (isset($account->student)) {
    $account->content['Student']['level'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t("Level:"),
      '#markup' => $account->student->level,
      '#weight' => 12,
    );
    if (!empty($account->student->scholarship)) {
      $account->content['Student']['scholarship'] =  array(
        '#type' => 'user_profile_item',
        '#title' => t("Scholarship:"),
        '#markup' => $account->student->scholarship,
        '#weight' => 12,
      );
    }
    if (!empty($account->student->scholarship_description)) {
      $account->content['Student']['scholarship'] =  array(
        '#type' => 'user_profile_item',
        '#title' => t("Scholarship Description:"),
        '#markup' => $account->student->scholarship_description,
        '#weight' => 12,
      );
    }
  }
  if (isset($account->staff)) {
    $options = mei_school_slice_predefined_roles($account->roles);
    $account->content['Staff']['job'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Job:'),
      '#markup' => implode(', ', $options),
      '#weight' => 0,
    );
    $account->content['Staff']['branch'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Department/Office/Branch:'),
      '#markup' => $account->staff->branch,
      '#weight' => 0,
    );
    $account->content['Staff']['start_date'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Job Start Date:'),
      '#markup' => format_date(strtotime($account->staff->start_date), 'custom', "d F Y"),
      '#weight' => 1,
    );
    if (isset($account->staff->admin_job)) {
      $account->content['Staff']['admin_job'] =  array(
        '#type' => 'user_profile_item',
        '#title' => t('Administration Job:'),
        '#markup' => $account->staff->admin_job,
        '#weight' => 2,
      );
    }
  }
 
  if (isset($account->alumni)) {
    $account->content['Alumnus']['graduation_year'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t("Graduation Year:"),
      '#markup' => $account->alumni->graduation_year,
      '#weight' => 12,
    );
    $account->content['Alumnus']['current_city'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t("Current City:"),
      '#markup' => $account->alumni->current_city,
      '#weight' => 12,
    );
  }
}

/**
 * Implementation of hook_user_load
 */
function mei_school_user_load($users) {
  global $user;
  $result = db_query('SELECT * FROM {mei_school_users_identities} WHERE uid IN (:uids) AND update_approved=1 ORDER BY vid DESC', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    if (empty($users[$record->uid]->identity)) {
      $users[$record->uid]->identity = $record;
      $users[$record->uid]->identity->full_name = mei_school_formatted_full_name($record->uid);
      if (mei_school_identity_not_approved($record->uid)) {
        $result_not_app = db_query('SELECT * FROM {mei_school_users_identities} WHERE uid = :uid ORDER BY vid DESC', array(':uid' => $record->uid))->fetchObject();
        $users[$record->uid]->identity_not_approved = $result_not_app;
        if ($user->uid == $record->uid) {
          $users[$record->uid]->identity = $result_not_app;
        }
      }
    }
    if ($data = mei_school_student($record->uid)) {
      $users[$record->uid]->student = $data;
    }
    if ($data = mei_school_staff($record->uid)) {
      $users[$record->uid]->staff = $data;
    }
    if ($data = mei_school_alumnus($record->uid)) {
      $users[$record->uid]->alumni = $data;
    }
    if ($data = mei_school_childeren_of_parent($record->uid)) {
      $users[$record->uid]->parenting = $data;
    }
    if ($data = mei_school_parents_of_student($record->uid)) {
      $users[$record->uid]->parents = $data;
    }
    if ($data = mei_school_siblings_of_student($record->uid)) {
      $users[$record->uid]->siblings = $data;
    }
  }
}

/**
 * Implementation of hook_user_update
 */
function mei_school_user_update(&$edit, $account, $category) {
  //it is needless if the user is not registered via mei_school
  if (!isset($account->identity)) {
    return;
  }
  //it is needless if user is updated by other modules
  if (!isset($edit['user_type'])) {
    return;
  }
  GLOBAL $user;
  $edit['updater_uid'] = $user->uid;
  $edit['update_approved'] = 1;
  if (!user_access('change administrative info')) {
    $edit['update_approved'] = 0;
    drupal_set_message(t("Changes are submitted to an administrator to approve."));
  }

  //compare old and new record
  $d = explode('-', $account->identity->dob);
  $account->identity->dob = array('year' => $d[0], 'month' => $d[1], 'day' => $d[2]);
  $diff = mei_school_identity_not_approved_diff((array)$account->identity, $edit);
  //if there is change, record identity data
  if (!empty($diff)) {
    mei_school_identity_insert($edit);
  }
  
  //staff, student and parent data can be updated only by admin
  if (user_access('change administrative info')) {
    if (isset($account->student)) {
      mei_school_student_write($edit, 'school_no');
    }
    if (isset($account->staff)) {
      mei_school_staff_write($edit, 'staff_no');
    }
    if (isset($account->parenting)) {
      //do 2 dimentional array for each kid of the current parent
      $fields = array('relation', 'guardian', 'student_resides');
      foreach ($edit as $field => $value) {
        $arr = explode('_', $field);
        $school_no = array_pop($arr);
        $field_name = implode('_', $arr);
        foreach ($fields as $field) {
          if ($field_name == $field) {
            $children[$school_no][$field] = $value;
          }
        }
      }
      //record for each kid
      foreach ($children as $school_no => $data) {
        $data['school_no'] = $school_no;
        $parent_data = array_merge($data, $edit);
        mei_school_parent_write($parent_data, array('school_no', 'relation'));
      }
    }
  }
}



